
That is when I really started to learn - and resent - the Kubernetes tools ecosystem. This is where i want
`deploydocus` to fit in.

### The existing Kubernetes tools landscape
`kubectl` is hard enough. Layer on `helm`, `kustomize`, `fluxcd`/`argocd`, `skaffold`, GitOps etc and things
start to feel pretty overwhelming. Coming from a Python background I had problems with them.
1. The single most common issue I have had with them is YAML. This is not an uncommon complaint.
YAML tends to be verbose in itself and the tooling around it is far from perfect
but I felt criticism of YAML hid a larger problem that Kubernetes applications have few sane defaults.
The application developer is expected to specify so much - capabilities, configmaps, secrets,

All these tools live up to the standard Unix tools philosophy of doing one things well

## Run a private Pypi-compatible server

### Using helm
There is a helm chart available at https://owkin.github.io/charts/
I am going to give you the cookbook approach.
1. `helm repo add owkin https://owkin.github.io/charts/`
2. `helm repo update`
3. ```shell
   helm install pypiserver \
    owkin/pypiserver \
    --set image.tag=latest
   ```
4. Get the application URL by running these commands:
   ```shell
   export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=pypiserver,app.kubernetes.io/instance=pypiserver" -o jsonpath="{.items[0].metadata.name}")
   echo "Visit http://127.0.0.1:8080 to use your application"
   kubectl port-forward --namespace default $POD_NAME 8080:8080
   ```
*Note: unfortunately the chart only deploys to default namespace* which you could

